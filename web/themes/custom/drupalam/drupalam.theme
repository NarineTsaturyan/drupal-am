<?php
/**
 * @file
 * Bootstrap sub-theme.
 *
 */

use Drupal\node\Entity\Node;

/**
 * Implements hook_theme_suggestions_HOOK_alter for blocks.
 */
function drupalam_theme_suggestions_block_alter(&$suggestions, $variables) {

  // Load theme suggestions for blocks from parent theme.
  foreach ($suggestions as &$suggestion) {
    $suggestion = str_replace('drupalam', 'bootstrap_', $suggestion);
  }
}

function drupalam_preprocess_views_view_list(&$variables) {
  $view = $variables['view'];
  // adds data- attributes for content-slider script
  if($view->element['#name'] == 'hero_slide' && $view->element['#display_id']  == 'block_1') {
    foreach($variables['rows'] as $key => $row) {
      // basic attributes
      $variables['rows'][$key]['attributes']->setAttribute('data-bg_image_opacity', 1);
      $variables['rows'][$key]['attributes']->setAttribute('data-bg_color', '');
      // nav thumbnail
      $style = \Drupal::entityTypeManager()->getStorage('image_style')->load('crop_70x70');
      $uri = $row['content']['#row']->_entity->get('field_heroslide_image')->entity->uri->value;
      $variables['rows'][$key]['attributes']->setAttribute('data-thumbnail', $style->buildUrl($uri));
      // background image
      $variables['rows'][$key]['attributes']->setAttribute('data-bg_image_url', file_create_url($uri));
      // content position, effect direction
      $positions = [
        'centered' => [
          'layout' => 'centered',
          'effect' => 'slideUp',
        ],
        'left' => [
          'layout' => 'text-img',
          'effect' => 'slideLeft',
        ],
        'right' => [
          'layout' => 'img-text',
          'effect' => 'slideLeft',
        ],
      ];
      $position = $row['content']['#row']->_entity->get('field_heroslide_text_position')->getValue()[0]['value'];
      $variables['rows'][$key]['attributes']->setAttribute('data-layout', $positions[$position]['layout']);
      $variables['rows'][$key]['attributes']->setAttribute('data-animation', $positions[$position]['effect']);
    }
  }
}

function drupalam_preprocess_field(&$variables) {
  $element = $variables['element'];
  if($variables['field_name'] == 'field_cards_background_image') {
    if($element['#bundle'] == 'cards_block' && $element['#view_mode'] == 'full') {
      $img = $variables['items'][0]['content']['#markup'];
      $css = '.block.where-do-i-start { background-image: url(' . $img . '); }';
      $variables['#attached']['html_head'][] = [
        [
          '#tag' => 'style',
          '#value' => $css,
        ],
        'where-do-i-start'
      ];
    }
    unset($variables['items']);
  }

  // Add comment count
  if (isset($element['#bundle']) && $element['#bundle'] == 'blog_post' && $variables['field_name'] == 'field_blog_category') {
    $variables['comment_count'] = $element['#object']->get('field_blog_comments')->comment_count;
  }
}

function drupalam_preprocess_page(&$variables) {
  if ($variables['is_front']) {
    $variables['#attached']['library'][] = 'drupalam/front-scripts';
  }

  if (isset($variables['node']) && $variables['node']->getType() == 'case_study') {
    $variables['#attached']['library'][] = 'drupalam/case-study-scripts';
  }

  if (isset($variables['page']) && $variables['page']['#title'] == 'Blog posts') {
    $variables['#attached']['library'][] = 'drupalam/blog-scripts';
  }
}

function drupalam_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['actions']['submit']['#value'] = 'SUBMIT COMMENT';
}

function drupalam_preprocess_image_formatter(&$vars) {
  $url = $vars['url'];
  if($url && $url->getRouteName() == 'entity.user.canonical' && $url->getRouteParameters()['user'] == 0) {
    $vars['url'] = null;
  }
}

function drupalam_preprocess_node(&$variables) {

  // Add comment count
  if ($variables['node']->getType() == 'blog_post') {
    $variables['comment_count'] = $variables['node']->get('field_blog_comments')->comment_count;
  }
}

function drupalam_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  // Set $form_name to pass to ElementInfo.php.
  $form['#form_name'] = $form['#theme'][0];
  // This gets the correct naming convention of views-exposed-form--view-name--view-display-name.html.twig
}
