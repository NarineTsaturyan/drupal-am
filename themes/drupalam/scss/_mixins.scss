// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// =============================================================================
// Transition
// =============================================================================

@mixin transition($transition) {
  -moz-transition:    $transition;
  -o-transition:      $transition;
  -webkit-transition: $transition;
  -ms-transition:     $transition;
  transition:         $transition;
}
// =============================================================================
// Transition Timing Function
// =============================================================================

@mixin transition-timing-function($transition) {
  -moz-transition-timing-function:    $transition;
  -webkit-transition-timing-function: $transition;
  -o-transition-timing-function:      $transition;
  -ms-transition-timing-function:     $transition;
  transition-timing-function:         $transition;
}

// =============================================================================
// Scale
// =============================================================================

@mixin scale($degree) {
  -webkit-transform: scale($degree); 
  -moz-transform: scale($degree);
  -o-transform: scale($degree);
  transform: scale($degree);
}

// =============================================================================
// Opacity
// =============================================================================
@mixin opacity($value) {
  -moz-opacity: $value;
  -khtml-opacity: $value;
  -webkit-opacity: $value;
  opacity: $value;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=" + $value * 100 + ")";
  filter: alpha(opacity=$value * 100);
}

// =============================================================================
// Translate Y
// =============================================================================
@mixin translateY($y) {
  -webkit-transform: translateY($y);
  -moz-transform: translateY($y);
  -ms-transform: translateY($y);
  -o-transform: translateY($y);
  transform: translateY($y);
}
// =============================================================================
// Rotate
// =============================================================================

@mixin rotate($degree) {
  -webkit-transform: rotate($degree);
  -moz-transform: rotate($degree);
  -o-transform: rotate($degree);
  transform: rotate($degree);
}

// =============================================================================
// Blur
// =============================================================================
@mixin blur($size) {
  -webkit-filter: blur($size);
  -moz-filter: blur($size);
  -o-filter: blur($size);
  -ms-filter: blur($size);
  filter: blur($size);
}

// =============================================================================
// Spin Animation
// =============================================================================
@mixin spinner ($animation, $duration, $iteration, $timing) {
  -webkit-animation-name: $animation;
  -webkit-animation-duration: $duration;
  -webkit-animation-iteration-count: $iteration;
  -webkit-animation-timing-function: $timing;
  -moz-animation-name: $animation;
  -moz-animation-duration: $duration;
  -moz-animation-iteration-count: $iteration;
  -moz-animation-timing-function: $timing;
  -ms-animation-name: $animation;
  -ms-animation-duration: $duration;
  -ms-animation-iteration-count: $iteration;
  -ms-animation-timing-function: $timing;
  animation-name: $animation;
  animation-duration: $duration;
  animation-iteration-count: $iteration;
  animation-timing-function: $timing;
}

// =============================================================================
// FontAwsome Icon
// =============================================================================

@mixin fontawsome-icn($icon, $color:inherit, $size:inherit, $place:"before") {
  &:#{$place} {
    content: $icon;
    display: inline-block;
    font-family: "Font Awesome 5 Free";
    font-size: $size;
    color: $color;
    @content;
  }
}

// =============================================================================
// Pexeto Icon
// =============================================================================

@mixin pexeto-icn($icon, $color:inherit, $size:inherit, $place:"before") {
  &:#{$place} {
    content: $icon;
    display: inline-block;
    font-family: PexetoIcons;
    font-size: $size;
    color: $color;
    @content;
  }
}

// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (
    eot: "?",
    svg: "#" + str-replace($name, " ", "_")
    );

  $formats: (
    otf: "opentype",
    ttf: "truetype"
    );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}

// =============================================================================
// Breakpoints
// =============================================================================

@mixin breakpoint($point) {
  @if $point == desktop {
    @media (min-width: $screen-lg) { @content ; }
  }
  @else if $point == laptop {
    @media (min-width: $screen-desktop) and (max-width: $screen-lg) { @content ; }
  }
  @else if $point == laptop_and_desktop {
    @media (min-width: $screen-desktop) { @content ; }
  }
  @else if $point == tablet {
    @media (min-width: $screen-tablet) and (max-width: $screen-desktop) { @content ; }
  }
  @else if $point == tablet_and_laptop {
    @media (min-width: $screen-tablet) and (max-width: $screen-lg) { @content ; }
  }
  @else if $point == tablet_and_desktop {
    @media (min-width: $screen-tablet) { @content ; }
  }
  @else if $point == mobile_and_tablet {
    @media (max-width: $screen-tablet) { @content ; }
  }
  @else if $point == no_mobile {
    @media (min-width: $screen-tablet - 1)  { @content ; }
  }
  @else if $point == mobile {
    @media (max-width: $screen-tablet - 1)  { @content ; }
  }
  @else if $point == mobile_and_laptop_and_desktop {
    @media (min-width: $screen-phone) { @content ; }
  }
}

// =============================================================================
// Anchor color
// =============================================================================

@mixin anchor_color($color: #fff) {
  color: $color;
  &:hover,
  &:focus {
    color: $brand-primary;
  }
}